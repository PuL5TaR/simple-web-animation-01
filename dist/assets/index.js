(function () { const o = document.createElement("link").relList; if (o && o.supports && o.supports("modulepreload")) return; for (const e of document.querySelectorAll('link[rel="modulepreload"]')) l(e); new MutationObserver(e => { for (const t of e) if (t.type === "childList") for (const n of t.addedNodes) n.tagName === "LINK" && n.rel === "modulepreload" && l(n) }).observe(document, { childList: !0, subtree: !0 }); function a(e) { const t = {}; return e.integrity && (t.integrity = e.integrity), e.referrerpolicy && (t.referrerPolicy = e.referrerpolicy), e.crossorigin === "use-credentials" ? t.credentials = "include" : e.crossorigin === "anonymous" ? t.credentials = "omit" : t.credentials = "same-origin", t } function l(e) { if (e.ep) return; e.ep = !0; const t = a(e); fetch(e.href, t) } })(); const i = document.querySelector(".cstm-pointer"), u = document.querySelector(".cstm-span"), s = u.querySelector("span"), d = r => new Promise(o => setTimeout(o, r)); let c = 0; document.addEventListener("mousemove", async r => { await d(200), i.style.opacity = "10", i.style.left = `${r.pageX}px`, i.style.top = `${r.pageY}px` }); document.addEventListener("click", () => { c == 0 ? (u.style.color = "#F273E6", s.innerHTML = "The world is a beatiful place") : c == 1 ? s.innerHTML = "The world is a beatiful place<br>with U in It" : s.innerHTML = "Happy Life<br>âœŒ<br>[ refresh ]", c++ });
